import logging
import openai
from flask import Flask, request
from telegram import Update, Bot, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.ext import Dispatcher

import os
from collections import defaultdict

# üîê –ö–õ–Æ–ß–ò (–ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render)
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# üìú –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    "–†—É—Å—Å–∫–∏–π": "–¢—ã ‚Äî –ò–ò-–¥–Ω–µ–≤–Ω–∏–∫. –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è. –ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç–æ–≤, –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–π, –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π.",
    "English": "You are an AI diary. Help the user express themselves. Do not give advice, just listen and support them.",
    "“ö–∞–∑–∞“õ—à–∞": "–°–µ–Ω ‚Äì –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∫“Ø–Ω–¥–µ–ª—ñ–∫. –¢–µ–∫ —Ç—ã“£–¥–∞, –∫–µ“£–µ—Å –±–µ—Ä–º–µ.",
    "Deutsch": "Du bist ein KI-Tagebuch. H√∂re zu und unterst√ºtze.",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "–¢–∏ ‚Äî –Ü–Ü-—â–æ–¥–µ–Ω–Ω–∏–∫. –ù–µ –¥–∞–≤–∞–π –ø–æ—Ä–∞–¥, –ø—Ä–æ—Å—Ç–æ —Å–ª—É—Ö–∞–π —ñ –ø—ñ–¥—Ç—Ä–∏–º—É–π.",
    "Portugu√™s": "Voc√™ √© um di√°rio de IA. Apenas escute e apoie.",
    "Espa√±ol": "Eres un diario de IA. Escucha y apoya sin dar consejos.",
    "Fran√ßais": "Tu es un journal IA. √âcoute et soutiens sans juger.",
}

# üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –û–ó–£)
user_context = defaultdict(lambda: {"language": "–†—É—Å—Å–∫–∏–π", "messages": []})

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üåê Flask app –¥–ª—è Render
app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)

@app.route("/", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    application.update_queue.put_nowait(update)
    return "ok"

# üîò –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [[lang] for lang in LANGUAGES.keys()]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ò–ò-–¥–Ω–µ–≤–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=markup
    )

# üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.message.text
    if lang in LANGUAGES:
        user_context[update.effective_user.id]["language"] = lang
        await update.message.reply_text(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}. –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∏—Å–∞—Ç—å.")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞.")

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_context[user_id]["language"]
    messages = user_context[user_id]["messages"]

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    messages.append({"role": "user", "content": update.message.text})
    if len(messages) > 20:
        messages = messages[-20:]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": LANGUAGES[lang]},
                *messages
            ]
        )
        reply = response.choices[0].message.content.strip()
        messages.append({"role": "assistant", "content": reply})
        user_context[user_id]["messages"] = messages
        await update.message.reply_text(reply)

    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        await update.message.reply_text("–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_language))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –Ω–∞ Render –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

