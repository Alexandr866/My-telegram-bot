import openai
import logging
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîë API-–∫–ª—é—á–∏
openai.api_key = os.environ.get("OPENAI_API_KEY")  # <-- –í–°–¢–ê–í–¨ –°–í–û–ô
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")   # <-- –í–°–¢–ê–í–¨ –°–í–û–ô

# Flask
app = Flask(__name__)
bot = Bot(token=TELEGRAM_TOKEN)
application = Application.builder().token(TELEGRAM_TOKEN).build()

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç. –Ø —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫. –ù–∞–ø–∏—à–∏, –∫–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    logger.info(f"üì© –û—Ç: {update.effective_user.username} ({update.effective_user.id}) ‚Äî {user_input}")
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥–Ω–µ–≤–Ω–∏–∫–æ–≤—ã–π –ò–ò. –ù–µ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç–æ–≤, –ø—Ä–æ—Å—Ç–æ —Å–ª—É—à–∞–µ—à—å –∏ –º—è–≥–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å."},
                {"role": "user", "content": user_input}
            ]
        )
        reply = response["choices"][0]["message"]["content"]
        await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# Flask endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# Telegram webhook/polling
@app.route('/start-bot')
def start_bot():
    thread = threading.Thread(target=application.run_polling, name="BotThread")
    thread.start()
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8080)
    #fix env vars

